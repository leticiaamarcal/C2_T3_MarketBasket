group_by(vore) %>%
summarise(mean_sleep = mean(sleep_total),
mean_mass_ratio = mean(mass_ratio),
numberRows = n())
# We want to add a column with the count for each row
msleep %>%
filter(sleep_total >= 2, sleep_total <= 19,
conservation != "domesticated",
!is.na(vore),
!is.na(conservation))%>%
mutate(mass_ratio = 1)%>%
group_by(vore) %>%
summarise(mean_sleep = mean(sleep_total),
mean_mass_ratio = mean(mass_ratio),
numberRows = n())
msleep %>%
filter(sleep_total >= 2, sleep_total <= 19,
conservation != "domesticated",
!is.na(vore),
!is.na(conservation))%>%
mutate(mass_ratio = brainwt/bodywt)%>%
group_by(vore) %>%
summarise(mean_sleep = mean(sleep_total),
mean_mass_ratio = mean(mass_ratio),
numberRows = n()) -> newDF6
View(newDF6)
msleep %>%
filter(sleep_total >= 2, sleep_total <= 19,
conservation != "domesticated",
!is.na(vore),
!is.na(conservation))%>%
mutate(mass_ratio = brainwt/bodywt)%>%
group_by(vore) %>%
summarise(mean_sleep = mean(sleep_total),
mean_mass_ratio = mean(mass_ratio),
numberRows = n()) %>%
arrange(desc(count)) -> newDF7
msleep %>%
filter(sleep_total >= 2, sleep_total <= 19,
conservation != "domesticated",
!is.na(vore),
!is.na(conservation))%>%
mutate(mass_ratio = brainwt/bodywt)%>%
group_by(vore) %>%
summarise(mean_sleep = mean(sleep_total),
mean_mass_ratio = mean(mass_ratio),
numberRows = n()) %>%
arrange(desc(numberRows)) -> newDF7
View(newDF7)
transactions <- read.csv("~/UbiqumR/C2_T3_MarketBasket/Data/Raw/transactions.csv")
View(transactions)
#o csv e um arquivo separado por virgula e lido como tabela
#neste arquivo, ele esta separado por ; por isso nao esta sendo
#lido d amaneira correta. quando colocamos sep = ";" avisamos
#o R que ele deve ler ; como separação
lineItem <- read.csv("~/UbiqumR/C2_T3_MarketBasket/Data/Raw/lineitems .csv", sep = ";")
lineItem <- read.csv("~/UbiqumR/C2_T3_MarketBasket/Data/Raw/lineitems .csv", sep = ";")
transactions <- read.csv("~/UbiqumR/C2_T3_MarketBasket/Data/Raw/transactions.csv")
#libraries
library(dplyr)
library(compare)
#o csv e um arquivo separado por virgula e lido como tabela
#neste arquivo, ele esta separado por ; por isso nao esta sendo
#lido d amaneira correta. quando colocamos sep = ";" avisamos
#o R que ele deve ler ; como separação
lineItemDF <- read.csv("~/UbiqumR/C2_T3_MarketBasket/Data/Raw/lineitems .csv", sep = ";")
ordersDF <- read.csv("~/UbiqumR/C2_T3_MarketBasket/Data/Raw/orders.csv", sep = ";")
transactions <- read.csv("~/UbiqumR/C2_T3_MarketBasket/Data/Raw/transactions.csv")
#mudar nome
colnames(ordersDF)[4] <- 'total_paid'
colnames(lineItemDF)[6] <- 'unit_price'
#selecionar coluna
lineItemDF %>% select(product_id)
lineItemDF %>% summarise(mean(lineItem))
#eliminar coluna (não diz nada, só zero)
lineItemDF <- lineItem[,-3]
#comparar coluna total_paid e unit_price
#usei funcao semi_join para comparar o que as tabelas tem em comum
matches <- semi_join(ordersDF, lineItemDF)
View(matches)
View(ordersDF)
View(ordersDF)
matches %>% filter(state = completed)
matches %>% filter(state = Completed)
matches %>% filter(state == Completed)
matches %>% filter(state = "Completed")
matches %>% filter(state == "Completed")
lineItemDF %>% filter(state == "Completed")
View(lineItemDF)
ordersDF %>% filter(state == "Completed")
ordersDF %>% filter(state != "Completed")
View(transactions)
View(transactions)
#eliminar coluna (não diz nada, só zero)
lineItemDF <- lineItem[,-3]
#eliminar coluna (não diz nada, só zero)
lineItemDF <- lineItemDF[,-3]
#o csv e um arquivo separado por virgula e lido como tabela
#neste arquivo, ele esta separado por ; por isso nao esta sendo
#lido d amaneira correta. quando colocamos sep = ";" avisamos
#o R que ele deve ler ; como separação
lineItemDF <- read.csv("~/UbiqumR/C2_T3_MarketBasket/Data/Raw/lineitems .csv", sep = ";")
ordersDF <- read.csv("~/UbiqumR/C2_T3_MarketBasket/Data/Raw/orders.csv", sep = ";")
transactions <- read.csv("~/UbiqumR/C2_T3_MarketBasket/Data/Raw/transactions.csv")
#mudar nome
colnames(ordersDF)[4] <- 'total_paid'
colnames(lineItemDF)[7] <- 'unit_price'
#selecionar coluna
lineItemDF %>% select(product_id)
lineItemDF %>% summarise(mean(lineItem))
#eliminar coluna (não diz nada, só zero)
lineItemDF <- lineItemDF[,-3]
#libraries
library(ggplot2)
library(dplyr)
library(tibble)
library(readr)
#importar data
#o csv e um arquivo separado por virgula e lido como tabela
#neste arquivo, ele esta separado por ; por isso nao esta sendo
#lido d amaneira correta. quando colocamos sep = ";" avisamos
#o R que ele deve ler ; como separação
Products <- read.csv("~/UbiqumR/C2_T3_MarketBasket/Data/Raw/lineitems .csv", sep = ";")
Orders <- read.csv("~/UbiqumR/C2_T3_MarketBasket/Data/Raw/orders.csv", sep = ";")
Transactions <- read.csv("~/UbiqumR/C2_T3_MarketBasket/Data/Raw/transactions.csv")
#libraries
library(ggplot2)
library(dplyr)
library(tibble)
library(readr)
#mudar nome
colnames(Orders)[4] <- 'total_paid'
colnames(Products)[7] <- 'unit_price'
#selecionar coluna
Products %>% select(product_id)
Products %>% summarise(mean(lineItem))
#eliminar coluna (não diz nada, só zero)
Products <- Products[,-3]
#comparar coluna total_paid e unit_price
#usei funcao semi_join para comparar o que as tabelas tem em comum
Matches <- semi_join(Orders, Products)
#know how many hows we have for completed orders
Matches %>% filter(state == "Completed")
Orders %>% filter(state != "Completed")
Orders
is.na(Orders)
sum(is.na(Orders))
sum(is.na(Products))
#looking for NA's
sum(is.na(Orders))
sum(is.na(Products))
View(Orders)
View(Orders)
View(Transactions)
View(Products)
View(Products)
#know how many hows we have for completed orders
Matches %>% filter(state == "Completed")
Orders %>% filter(state != "Completed")
Orders %>% filter(state == "Completed")
View(Matches)
#looking for NA's
sum(is.na(Orders))
which(is.na(Orders))
View(Orders)
View(Orders)
Orders <- read.csv("~/UbiqumR/C2_T3_MarketBasket/Data/Raw/orders.csv", sep = ";")
#looking for NA's
sum(is.na(Orders))
which(is.na(Orders))
#looking for NA's
sum(is.na(Orders$total_paid.))
#looking for NA's
sum(is.na(Orders$total_paid))
#looking for NA's
sum(is.na(Orders$total_paid.))
Orders <- read_csv("~/UbiqumR/C2_T3_MarketBasket/Data/Raw/orders.csv", sep = ";")
Orders <- read_csv("~/UbiqumR/C2_T3_MarketBasket/Data/Raw/orders.csv")
View(Orders)
View(Orders)
Orders <- read_csv2("~/UbiqumR/C2_T3_MarketBasket/Data/Raw/orders.csv")
View(Orders)
#looking for NA's
sum(is.na(Orders$total_paid,))
#looking for NA's
sum(is.na(Orders$total_paid.))
#looking for NA's
sum(is.na(Orders$`total_paid,`))
#looking for NA's
sum(is.na(Orders))
Products %>% group_by(id_order)
View(Orders)
View(Orders)
#looking for NA's
sum(is.na(Orders))
which(is.na(Orders))
#looking for NA's
sum(is.na(Orders))
sum(is.na(Products))
Products %>% group_by(id_order) %>%
mutate(PQ = sum(product_quantity))
aggregate(Products$sku, list(Products$sku), paste, collapse=",")
Products <- aggregate(Products$sku, list(Products$sku), paste, collapse=",")
View(Products)
#importar data
#o csv e um arquivo separado por virgula e lido como tabela
#neste arquivo, ele esta separado por ; por isso nao esta sendo
#lido d amaneira correta. quando colocamos sep = ";" avisamos
#o R que ele deve ler ; como separação
Products <- read_csv("~/UbiqumR/C2_T3_MarketBasket/Data/Raw/lineitems .csv", sep = ";")
#selecionar coluna
Products %>% select(product_id)
Products %>% summarise(mean(Products))
#importar data
#o csv e um arquivo separado por virgula e lido como tabela
#neste arquivo, ele esta separado por ; por isso nao esta sendo
#lido d amaneira correta. quando colocamos sep = ";" avisamos
#o R que ele deve ler ; como separação
Products <- read_csv("~/UbiqumR/C2_T3_MarketBasket/Data/Raw/lineitems .csv", sep = ";")
#importar data
#o csv e um arquivo separado por virgula e lido como tabela
#neste arquivo, ele esta separado por ; por isso nao esta sendo
#lido d amaneira correta. quando colocamos sep = ";" avisamos
#o R que ele deve ler ; como separação
Products <- read_csv2("~/UbiqumR/C2_T3_MarketBasket/Data/Raw/lineitems .csv")
#mudar nome
colnames(Orders)[4] <- 'total_paid'
colnames(Products)[7] <- 'unit_price'
#eliminar coluna (não diz nada, só zero)
Products <- Products[,-3]
Products <- aggregate(Products$id, list(Products$sku), paste, collapse=",")
#importar data
#o csv e um arquivo separado por virgula e lido como tabela
#neste arquivo, ele esta separado por ; por isso nao esta sendo
#lido d amaneira correta. quando colocamos sep = ";" avisamos
#o R que ele deve ler ; como separação
Products <- read_csv2("~/UbiqumR/C2_T3_MarketBasket/Data/Raw/lineitems .csv")
#selecionar coluna
Products %>% select(product_id)
Products %>% summarise(mean(Products))
#eliminar coluna (não diz nada, só zero)
Products <- Products[,-3]
Products <- aggregate(Products$sku, list(Products$id_order), paste, collapse=",")
#importar data
#o csv e um arquivo separado por virgula e lido como tabela
#neste arquivo, ele esta separado por ; por isso nao esta sendo
#lido d amaneira correta. quando colocamos sep = ";" avisamos
#o R que ele deve ler ; como separação
Products <- read_csv2("~/UbiqumR/C2_T3_MarketBasket/Data/Raw/lineitems .csv")
#mudar nome
colnames(Orders)[4] <- 'total_paid'
colnames(Products)[7] <- 'unit_price'
#eliminar coluna (não diz nada, só zero)
Products <- Products[,-3]
#Juntei os "sku" em uma coluna e mantive o ID order
skuDF <- aggregate(Products$sku, list(Products$id_order), paste, collapse=",")
View(skuDF)
View(Matches)
Matches2 <- semi_join(Products, Orders)
View(Matches2)
View(Matches)
View(Matches)
Matches_ <- anti_join(Products, Orders)
View(Matches_)
View(Matches_)
View(Matches_)
View(skuDF)
View(skuDF)
View(Matches_)
View(Orders)
View(Products)
View(Products)
Products$TotalPrice_Quantity <- Products$product_quantity * Products$unit_price
View(Products)
Products %>% group_by(id_order) %>%
summarise(TP = sum(Price_Quantity))
Products$TotalPrice <- Products$product_quantity * Products$unit_price
Products %>% group_by(id_order) %>%
summarise(TP = sum(TotalPrice))
Products %>% group_by(id_order)%>%
summarise(TP = sum(TotalPrice))
Products$TotalPrice <- Products$product_quantity * Products$unit_price
Products %>% group_by(id_order)%>%
summarise(TP = sum(TotalPrice))
Products %>% group_by(id_order)%>%
summarise(TP = sum(TotalPrice)) -> JoinDF
View(JoinDF)
Products %>% group_by(id_order)%>%
summarise(TP = sum(TotalPrice), Q = sum(product_quantity)) -> JoinDF
View(JoinDF)
View(Products)
joinNew <- bind_rows(JoinDF, skuDF)
View(joinNew)
View(joinNew)
joinNew <- bind_cols(JoinDF, skuDF)
#Juntei os "sku" em uma coluna e mantive o ID order
skuDF <- aggregate(Products$sku, list(Products$id_order), paste, collapse=",")
Products$TotalPrice <- Products$product_quantity * Products$unit_price
Products %>% group_by(id_order)%>%
summarise(TP = sum(TotalPrice), Q = sum(product_quantity)) -> JoinDF
joinNew <- bind_cols(JoinDF, skuDF)
View(joinNew)
View(joinNew)
JoinFinal <- semi_join(joinNew, Orders)
View(JoinFinal)
View(JoinFinal)
joinNew <- bind_cols(JoinDF, skuDF)
JoinFinal <- blind_cols(joinNew, Orders)
JoinFinal <- bind_cols(joinNew, Orders)
JoinFinal <- nest_join(joinNew, Orders)
View(JoinFinal[[6]][[1]])
JoinFinal <- inner_join(joinNew, Orders)
JoinTotal <- inner_join(joinNew, Orders)
JoinTotal <- inner_join(joinNew, Orders)
JoinFinal <- JoinTotal[, c(1, 7, 3, 5, 2, 8, 6, 4)]
JoinFinal <- JoinFinal[,-8]
#importar data
#o csv e um arquivo separado por virgula e lido como tabela
#neste arquivo, ele esta separado por ; por isso nao esta sendo
#lido da maneira correta. Quando colocamos sep = ";" avisamos
#o R que ele deve ler ; como separação. pode usar assim:
#Orders <- read.csv("~/UbiqumR/C2_T3_MarketBasket/Data/Raw/orders.csv", sep = “;”)
#mas pode usar read_csv2 tambem como abaixo
Products <- read_csv2("~/UbiqumR/C2_T3_MarketBasket/Data/Raw/lineitems .csv")
Orders <- read_csv2("~/UbiqumR/C2_T3_MarketBasket/Data/Raw/orders.csv")
Transactions <- read.csv("~/UbiqumR/C2_T3_MarketBasket/Data/Raw/transactions.csv")
View(Products)
View(Products)
#libraries
library(ggplot2)
library(dplyr)
library(tibble)
library(readr)
#mudar nome
colnames(Orders)[4] <- 'total_paid'
colnames(Products)[7] <- 'unit_price'
#semi_join to compare what tables have in common. Number of rows change
#pay attetion to it
Matches <- semi_join(Orders, Products)
Matches2 <- semi_join(Products, Orders)
Matches_ <- anti_join(Products, Orders)
#know how many hows we have for completed orders
Matches %>% filter(state == "Completed")
Orders %>% filter(state == "Completed")
#creat a new column that multiply the product quantity and unit_price
Products$TotalPrice <- Products$product_quantity * Products$unit_price
#group by id_order
Products %>% group_by(id_order)%>%
summarise(total_price = sum(TotalPrice), Q = sum(product_quantity)) -> JoinDF
joinNew <- bind_cols(JoinDF, skuDF)
JoinTotal <- inner_join(joinNew, Orders)
JoinFinal <- JoinTotal[, c(1, 7, 3, 5, 2, 8, 6, 4)]
JoinFinal <- JoinFinal[,-8]
#group by id_order to be able to sum TotalPrice column with same
#id_order. With summarise, I created a column that sum TotalPrice and
#other that sum product_quantity
Products %>% group_by(id_order)%>%
summarise(total_price = sum(TotalPrice), product_quantity = sum(product_quantity)) -> JoinDF
#Join tables
joinNew <- bind_cols(JoinDF, skuDF)
#join tables
JoinTotal <- inner_join(joinNew, Orders)
#changing the position of the columns
finalDF <- JoinTotal[, c(1, 7, 3, 5, 2, 8, 6, 4)]
#deleting the last column
finalDF <- JoinFinal[,-8]
#join tables
JoinTotal <- inner_join(joinNew, Orders)
#changing the position of the columns
finalDF <- JoinTotal[, c(1, 7, 3, 5, 2, 8, 6, 4)]
#importar data
#o csv e um arquivo separado por virgula e lido como tabela
#neste arquivo, ele esta separado por ; por isso nao esta sendo
#lido da maneira correta. Quando colocamos sep = ";" avisamos
#o R que ele deve ler ; como separação. pode usar assim:
#Orders <- read.csv("~/UbiqumR/C2_T3_MarketBasket/Data/Raw/orders.csv", sep = “;”)
#mas pode usar read_csv2 tambem como abaixo
Products <- read_csv2("~/UbiqumR/C2_T3_MarketBasket/Data/Raw/lineitems .csv")
#importar data
#o csv e um arquivo separado por virgula e lido como tabela
#neste arquivo, ele esta separado por ; por isso nao esta sendo
#lido da maneira correta. Quando colocamos sep = ";" avisamos
#o R que ele deve ler ; como separação. pode usar assim:
#Orders <- read.csv("~/UbiqumR/C2_T3_MarketBasket/Data/Raw/orders.csv", sep = “;”)
#mas pode usar read_csv2 tambem como abaixo
Products <- read_csv2("~/UbiqumR/C2_T3_MarketBasket/Data/Raw/lineitems .csv")
Orders <- read.csv("~/UbiqumR/C2_T3_MarketBasket/Data/Raw/orders.csv", sep = “;”)
#importar data
#o csv e um arquivo separado por virgula e lido como tabela
#neste arquivo, ele esta separado por ; por isso nao esta sendo
#lido da maneira correta. Quando colocamos sep = ";" avisamos
#o R que ele deve ler ; como separação. pode usar assim:
#Orders <- read.csv("~/UbiqumR/C2_T3_MarketBasket/Data/Raw/orders.csv", sep = ';')
#mas pode usar read_csv2 tambem como abaixo
Products <- read_csv2("~/UbiqumR/C2_T3_MarketBasket/Data/Raw/lineitems .csv")
Orders <- read.csv("~/UbiqumR/C2_T3_MarketBasket/Data/Raw/orders.csv", sep = ';')
#importar data
#o csv e um arquivo separado por virgula e lido como tabela
#neste arquivo, ele esta separado por ; por isso nao esta sendo
#lido da maneira correta. Quando colocamos sep = ";" avisamos
#o R que ele deve ler ; como separação. pode usar assim:
#Orders <- read.csv("~/UbiqumR/C2_T3_MarketBasket/Data/Raw/orders.csv", sep = ';')
#mas pode usar read_csv2 tambem como abaixo
Products <- read_csv2("~/UbiqumR/C2_T3_MarketBasket/Data/Raw/lineitems .csv")
Products <- read.csv("~/UbiqumR/C2_T3_MarketBasket/Data/Raw/lineitems .csv", sep = ‘;’)
Products <- read.csv("~/UbiqumR/C2_T3_MarketBasket/Data/Raw/lineitems .csv", sep = ';')
Transactions <- read.csv("~/UbiqumR/C2_T3_MarketBasket/Data/Raw/transactions.csv")
#libraries
library(ggplot2)
library(dplyr)
library(tibble)
library(readr)
#change column names
colnames(Orders)[4] <- 'total_paid'
colnames(Products)[7] <- 'unit_price'
View(Orders)
View(Products)
#delete product_id column (its doesnt say anything)
Products <- Products[,-3]
#semi_join to compare what tables have in common. Number of rows change
#pay attetion to it
Matches <- semi_join(Orders, Products) #it takes Orders as reference
Matches2 <- semi_join(Products, Orders)
Matches_ <- anti_join(Products, Orders) #what doesnt match
#Join "sku" in one column and kept the ID
skuDF <- aggregate(Products$sku, list(Products$id_order), paste, collapse=",")
#creat a new column that multiply the product quantity and unit_price
Products$TotalPrice <- Products$product_quantity * Products$unit_price
#group by id_order to be able to sum TotalPrice column with same
#id_order. With summarise, I created a column that sum TotalPrice and
#other that sum product_quantity
Products %>% group_by(id_order)%>%
summarise(total_price = sum(TotalPrice), product_quantity = sum(product_quantity)) -> JoinDF
#Join tables
joinNew <- bind_cols(JoinDF, skuDF)
#join tables
JoinTotal <- inner_join(joinNew, Orders)
#changing the position of the columns
finalDF <- JoinTotal[, c(1, 7, 3, 5, 2, 8, 6, 4)]
#deleting the last column
finalDF <- JoinFinal[,-8]
#deleting the last column
finalDF <- finalDF[,-8]
View(finalDF)
#creat a new column that multiply the product quantity and unit_price
Products$TotalPrice <- Products$product_quantity * Products$unit_price
#creat a new column that multiply the product quantity and unit_price
Products$TotalPrice <- Products$product_quantity*Products$unit_price
#creat a new column that multiply the product quantity and unit_price
Products$TotalPrice <- Products$product_quantity * Products$unit_price
Products$TotalPrice <- Products$product_quantity * Products$unit_price
#importar data
#o csv e um arquivo separado por virgula e lido como tabela
#neste arquivo, ele esta separado por ; por isso nao esta sendo
#lido da maneira correta. Quando colocamos sep = ";" avisamos
#o R que ele deve ler ; como separação. pode usar assim:
#Orders <- read.csv("~/UbiqumR/C2_T3_MarketBasket/Data/Raw/orders.csv", sep = ';')
#mas pode usar read_csv2 tambem como abaixo
#Products <- read_csv2("~/UbiqumR/C2_T3_MarketBasket/Data/Raw/lineitems .csv")
#Orders <- read_csv2("~/UbiqumR/C2_T3_MarketBasket/Data/Raw/orders.csv")
Transactions <- read.csv("~/UbiqumR/C2_T3_MarketBasket/Data/Raw/transactions.csv")
Products <- read.csv("~/UbiqumR/C2_T3_MarketBasket/Data/Raw/lineitems .csv", sep = ';')
Orders <- read.csv("~/UbiqumR/C2_T3_MarketBasket/Data/Raw/orders.csv", sep = ';')
#importar data
#o csv e um arquivo separado por virgula e lido como tabela
#neste arquivo, ele esta separado por ; por isso nao esta sendo
#lido da maneira correta. Quando colocamos sep = ";" avisamos
#o R que ele deve ler ; como separação. pode usar assim:
#Orders <- read.csv("~/UbiqumR/C2_T3_MarketBasket/Data/Raw/orders.csv", sep = ';')
#mas pode usar read_csv2 tambem como abaixo
#Products <- read_csv2("~/UbiqumR/C2_T3_MarketBasket/Data/Raw/lineitems .csv")
#Orders <- read_csv2("~/UbiqumR/C2_T3_MarketBasket/Data/Raw/orders.csv")
Transactions <- read.csv("~/UbiqumR/C2_T3_MarketBasket/Data/Raw/transactions.csv")
Transactions <- read.csv("~/UbiqumR/C2_T3_MarketBasket/Data/Raw/transactions.csv")
Transactions <- read.csv("~/UbiqumR/C2_T3_MarketBasket/Data/Raw/transactions.csv")
Products <- read.csv("~/UbiqumR/C2_T3_MarketBasket/Data/Raw/lineitems .csv", sep = ';')
Orders <- read.csv("~/UbiqumR/C2_T3_MarketBasket/Data/Raw/orders.csv", sep = ';')
#libraries
library(ggplot2)
library(dplyr)
library(tibble)
library(readr)
#change column names
colnames(Orders)[4] <- 'total_paid'
colnames(Products)[7] <- 'unit_price'
#Join "sku" in one column and kept the ID
skuDF <- aggregate(Products$sku, list(Products$id_order), paste, collapse=",")
#creat a new column that multiply the product quantity and unit_price
Products$TotalPrice <- Products$product_quantity * Products$unit_price
is(Products$product_quantity)
Products$product_quantity <- as.interger(Products$product_quantity)
Products$product_quantity <- as.integer(Products$product_quantity)
#transforming as interger
Products$product_quantity <- as.integer(Products$product_quantity)
Products$unit_price <- as.integer(Products$unit_price)
#creat a new column that multiply the product quantity and unit_price
Products$TotalPrice <- Products$product_quantity * Products$unit_price
#group by id_order to be able to sum TotalPrice column with same
#id_order. With summarise, I created a column that sum TotalPrice and
#other that sum product_quantity
Products %>% group_by(id_order)%>%
summarise(total_price = sum(TotalPrice), product_quantity = sum(product_quantity)) -> JoinDF
#Join tables
joinNew <- bind_cols(JoinDF, skuDF)
#join tables
JoinTotal <- inner_join(joinNew, Orders)
#changing the position of the columns
finalDF <- JoinTotal[, c(1, 7, 3, 5, 2, 8, 6, 4)]
#deleting the last column
finalDF <- finalDF[,-8]
#changing names
colnames(finalDF)[4] <- 'sku'
